<?xml version="1.0" encoding="UTF-8" ?>
<Project ToolsVersion="4.0" DefaultTargets="Local" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Properties provided by caller (or TeamCity) -->
  <PropertyGroup>
    <!-- Default values -->
    <Version></Version>

    <BuildAgentDataSource></BuildAgentDataSource>
    <SkipTests>False</SkipTests>
    <!-- Add multiple configurations/platforms with + seperator, e.g. "Debug+Release" -->
    <Configurations>Debug</Configurations>
    <Platforms>x86</Platforms>
  </PropertyGroup>

  <!-- Global Properties -->
  <PropertyGroup>
    <MSBuildExtensionPackVersion>1.2.0</MSBuildExtensionPackVersion>
  </PropertyGroup>
  
  <PropertyGroup>
    <SolutionDirectory>$(MSBuildProjectDirectory)\</SolutionDirectory>
    <OutputDirectory>$(SolutionDirectory)Build\</OutputDirectory>
    <SourceExportDirectory>$(SolutionDirectory)SourceExport\</SourceExportDirectory>
    <LogsDirectory>$(OutputDirectory)Logs\</LogsDirectory>
    <PackagesDirectory>$(OutputDirectory)</PackagesDirectory>
    <NuGetPackagesDirectory>$(SolutionDirectory)packages\</NuGetPackagesDirectory>
    <MSBuildExtensionPackPath>$(NuGetPackagesDirectory)MSBuild.Extension.Pack\lib\net40\</MSBuildExtensionPackPath>
    <!-- <MSpecRunnersPath>$(NuGetPackagesDirectory)Machine.Specifications.$(MSpecVersion)\tools\</MSpecRunnersPath> -->
    <!-- <NUnitRunnersPath>$(NuGetPackagesDirectory)NUnit.Runners\tools\</NUnitRunnersPath> -->
  </PropertyGroup>

  <ItemGroup>
    <AssemblyInfoSharedFiles Include="$(SolutionDirectory)Farada.AssemblyInfoShared.cs"/>
  </ItemGroup>

  <!-- Configuration -->
  <ItemGroup>
    <CodeProjects Include="Farada.TestDataGeneration\Farada.TestDataGeneration.csproj; Farada.Evolution\Farada.Evolution.csproj">
      <PackageName>Farada.TestDataGeneration</PackageName>
    </CodeProjects>
	
	<Projects Include="@(CodeProjects)"/>
	
    <UnitTestProjects Include="*.UnitTests\*.csproj"/>
    <IntegrationTestProjects Include="*.IntegrationTests\*.csproj"/>

    <!-- This includes config files that need "Data Source=localhost" to be replaced with a build agent data source (PrepareTestConfigurations). -->
    <TestAppConfigFilesWithConnectionStrings Include="*.UnitTests\App.config"/>
    <TestAppConfigFilesWithConnectionStrings Include="*.IntegrationTests\App.config"/>
  </ItemGroup>

  <ItemGroup>
    <AllConfigurations Include="$(Configurations.Split('+'))" />
  </ItemGroup>

  <ItemGroup>
    <AllPlatforms Include="$(Platforms.Split('+'))">
      <Use32BitTestRunner Condition="'%(Identity)' == 'x86'">True</Use32BitTestRunner>
      <Use32BitTestRunner Condition="'%(Identity)' == 'x64'">False</Use32BitTestRunner>
    </AllPlatforms>
  </ItemGroup>

  <!-- External Tasks -->
  <UsingTask AssemblyFile="$(MSBuildExtensionPackPath)MSBuild.ExtensionPack.dll" TaskName="MSBuild.ExtensionPack.CodeQuality.NUnit" />
  <UsingTask AssemblyFile="$(MSBuildExtensionPackPath)MSBuild.ExtensionPack.dll" TaskName="MSBuild.ExtensionPack.Compression.Zip" />
  <UsingTask AssemblyFile="$(MSBuildExtensionPackPath)MSBuild.ExtensionPack.dll" TaskName="MSBuild.ExtensionPack.Framework.AssemblyInfo" />
  <UsingTask AssemblyFile="$(MSBuildExtensionPackPath)MSBuild.ExtensionPack.dll" TaskName="MSBuild.ExtensionPack.Framework.XProduct" />
  <UsingTask AssemblyFile="$(MSBuildExtensionPackPath)MSBuild.ExtensionPack.dll" TaskName="MSBuild.ExtensionPack.Science.Maths" />
  <UsingTask AssemblyFile="$(MSBuildExtensionPackPath)MSBuild.ExtensionPack.dll" TaskName="MSBuild.ExtensionPack.Xml.XmlFile" />
  <UsingTask AssemblyFile="$(MSBuildExtensionPackPath)MSBuild.ExtensionPack.dll" TaskName="MSBuild.ExtensionPack.FileSystem.File" />

  <!-- Interface -->
  <PropertyGroup>
    <CommonTargets>BootstrapSolution;CreateDirectories;PrepareTestConfigurations</CommonTargets>
  </PropertyGroup>

  <Target Name="Local" DependsOnTargets="$(CommonTargets);PrepareLocalTargets;RunPreparedTargets" />
  <Target Name="PrepareLocalTargets">
    <PropertyGroup>
      <Targets>Build;RunPreparedTestTargets</Targets>
      <TestTargets>RunUnitTests;RunIntegrationTests</TestTargets>
    </PropertyGroup>
  </Target>

  <Target Name="Continuous" DependsOnTargets="Full"/>

  <Target Name="Nightly" DependsOnTargets="Full"/>

  <Target Name="Full" DependsOnTargets="Clean;$(CommonTargets);PrepareFullTargets;RunPreparedTargets" />
  <Target Name="PrepareFullTargets">
    <PropertyGroup>
      <Targets>UpdateAssemblyInfoShared;Build;Package;RestoreAssemblyInfoShared;RunPreparedTestTargets</Targets>
      <TestTargets>RunUnitTests;RunIntegrationTests</TestTargets>
    </PropertyGroup>
  </Target>

  <!-- Helper Targets -->
  <Target Name="RunPreparedTargets">
    <MSBuild Projects="$(MSBuildProjectFile)"
             BuildInParallel="false"
             Targets="LogConfiguration;$(Targets)"
             Properties="Configuration=%(AllConfigurations.Identity);
                         Version=$(Version);
                         TestTargets=$(TestTargets)"/>
    <OnError ExecuteTargets="RestoreAssemblyInfoShared"/>
  </Target>

  <Target Name="LogConfiguration">
    <Message Text="LOG: CONFIGURATION $(Configuration) STARTED!" Importance="High"/>
  </Target>

  <Target Name="CreateTestVariants">
    <!-- Use XProduct if additional variant item groups (e.g. database connections) are required -->
    <!--
    <MSBuild.ExtensionPack.Framework.XProduct IdentityFormat="{1}-{2}" Group1="@(AllConfigurations)" Group2="@(AllPlatforms)">
      <Output ItemName="TestVariants" TaskParameter="Result" />
    </MSBuild.ExtensionPack.Framework.XProduct>
    -->
    <ItemGroup>
      <TestVariants Include="$(Configuration)-%(AllPlatforms.Identity)">
        <VariantName>$(Configuration)-%(AllPlatforms.Identity)</VariantName>
        <Use32BitTestRunner>%(AllPlatforms.Use32BitTestRunner)</Use32BitTestRunner>
      </TestVariants>
    </ItemGroup>

    <MSBuild.ExtensionPack.Framework.XProduct IdentityFormat="{1}" Group1="@(BuiltUnitTestAssemblies)" Group2="@(TestVariants)" Condition="$(TestTargets.Contains('RunUnitTests'))">
      <Output TaskParameter="Result" ItemName="UnitTests" />
    </MSBuild.ExtensionPack.Framework.XProduct>

    <MSBuild.ExtensionPack.Framework.XProduct IdentityFormat="{1}" Group1="@(BuiltIntegrationTestAssemblies)" Group2="@(TestVariants)" Condition="$(TestTargets.Contains('RunIntegrationTests'))">
      <Output TaskParameter="Result" ItemName="IntegrationTests" />
    </MSBuild.ExtensionPack.Framework.XProduct>

    <ItemGroup>
     <!-- <AllMSpecTests Include="@(UnitTests)"/> -->
     <!-- <AllMSpecTests Include="@(IntegrationTests)"/> -->
    </ItemGroup>
  </Target>

  <Target Name="RunPreparedTestTargets" DependsOnTargets="CreateTestVariants">
  </Target>

  <!-- Targets -->
  <Target Name="BootstrapSolution">
    <Message Text="LOG: Installing solution-wide NuGet packages..." Importance="High"/>

    <Exec Command=".nuget\NuGet.exe install MSBuild.Extension.Pack -Version $(MSBuildExtensionPackVersion) -o packages -ExcludeVersion"/>
    <Exec Command=".nuget\NuGet.exe install NUnit.Runners -Version $(NUnitVersion) -o packages -ExcludeVersion"/>

    <Message Text="LOG: Installed solution-wide NuGet packages." Importance="High"/>
  </Target>

  <Target Name="CreateDirectories">
    <Message Text="LOG: Creating build directories..." Importance="High"/>
    <MakeDir Directories="$(OutputDirectory)"/>
    <MakeDir Directories="$(LogsDirectory)"/>
    <Message Text="LOG: Directories created." Importance="High"/>
  </Target>

  <Target Name="Clean">
    <Message Text="LOG: Cleaning project..." Importance="High"/>

    <MSBuild Projects="@(Projects);@(UnitTestProjects);@(IntegrationTestProjects)"
             Targets="Clean"
             ContinueOnError="false"
             BuildInParallel="true"
             Properties="Configuration=%(AllConfigurations.Identity)">
    </MSBuild>

    <RemoveDir Directories="$(OutputDirectory)"/>
    <RemoveDir Directories="$(SourceExportDirectory)"/>

    <Message Text="LOG: Cleaned." Importance="High"/>
  </Target>

  <Target Name="Build" DependsOnTargets="BuildProjects;BuildTestProjects"/>

  <Target Name="BuildProjects">
    <Message Text="LOG: Building projects:" Importance="High"/>
    <Message Text="LOG: * %(CodeProjects.Identity)" Importance="High"/>

    <PropertyGroup>
      <ContinueOnError>false</ContinueOnError>
      <Properties>Configuration=$(Configuration);
                  SolutionDir=$(SolutionDirectory)</Properties>
      <TargetOutputsItemName>BuiltAssemblies</TargetOutputsItemName>
    </PropertyGroup>
    
    <MSBuild Projects="@(CodeProjects)"
             ContinueOnError="$(ContinueOnError)"
             Targets="Build"
             BuildInParallel="true"
             Properties="$(Properties)">
      <Output TaskParameter="TargetOutputs" ItemName="$(TargetOutputsItemName)"/>
    </MSBuild>
  </Target>

  <Target Name="BuildTestProjects">
    <Message Text="LOG: Building test projects:" Importance="High"/>
    <Message Text="LOG: * %(UnitTestProjects.Identity)" Importance="High"/>
    <Message Text="LOG: * %(IntegrationTestProjects.Identity)" Importance="High"/>

    <PropertyGroup>
      <ContinueOnError>false</ContinueOnError>
      <Properties>Configuration=$(Configuration);
                  SolutionDir=$(SolutionDirectory)</Properties>
    </PropertyGroup>

    <MSBuild Projects="@(UnitTestProjects)"
             ContinueOnError="$(ContinueOnError)"
             BuildInParallel="true"
             Properties="$(Properties)">
      <Output TaskParameter="TargetOutputs" ItemName="BuiltUnitTestAssemblies"/>
    </MSBuild>

    <MSBuild Projects="@(IntegrationTestProjects)"
             ContinueOnError="$(ContinueOnError)"
             BuildInParallel="true"
             Properties="$(Properties)">
      <Output TaskParameter="TargetOutputs" ItemName="BuiltIntegrationTestAssemblies"/>
    </MSBuild>
  </Target>

  <Target Name="UpdateAssemblyInfoShared">
    <Message Text="LOG: Updating @(AssemblyInfoSharedFiles)..." Importance="High"/>
    <Error Text="Version property must not be empty." Condition="$(Version) == ''"/>

    <Copy SourceFiles="%(AssemblyInfoSharedFiles.FullPath)" DestinationFiles="%(AssemblyInfoSharedFiles.FullPath).bkp" />
    <MSBuild.ExtensionPack.Framework.AssemblyInfo AssemblyInfoFiles="@(AssemblyInfoSharedFiles)"
                                                  AssemblyVersion="$(Version)"
                                                  AssemblyFileVersion="$(Version)"
                                                  AssemblyInformationalVersion="$(Version)"
                                                  AssemblyConfiguration="$(Configuration)"
                                                  UpdateAssemblyInformationalVersion="True"/>

    <Message Text="LOG: Updated." Importance="High"/>
  </Target>
  <Target Name="RestoreAssemblyInfoShared">
    <Move SourceFiles="%(AssemblyInfoSharedFiles.FullPath).bkp"
          DestinationFiles="%(AssemblyInfoSharedFiles.FullPath)"
          Condition="Exists('%(AssemblyInfoSharedFiles.FullPath).bkp')" />
  </Target>

  <Target Name="CreatePackagesItemGroup">
    <ItemGroup>
      <Packages Include="%(CodeProjects.Identity)" Condition="'%(CodeProjects.PackageName)' != ''">
        <PackageName>%(CodeProjects.PackageName)-$(Configuration)</PackageName>
        <FilePath>%(CodeProjects.RootDir)%(CodeProjects.Directory)bin\$(Configuration)\</FilePath>
      </Packages>
    </ItemGroup>

    <Message Text="%(Packages.PackageName) - %(Packages.FilePath)" Importance="High"/>
  </Target>

  <Target Name="Package" DependsOnTargets="CreatePackagesItemGroup" Outputs="%(Packages.Identity)">
    <Message Text="LOG: Packaging project..." Importance="High"/>
   
    <ItemGroup>
      <CompressFiles Include="%(Packages.FilePath)**\*" />
    </ItemGroup>
    
    <!-- Package -->
    <MSBuild.ExtensionPack.Compression.Zip TaskAction="Create"
                                           CompressFiles="@(CompressFiles)"
                                           RemoveRoot="%(Packages.FilePath)"
                                           ZipFileName="$(OutputDirectory)%(Packages.PackageName).zip"/>

    <Message Text="LOG: Package created." Importance="High"/>
  </Target>

  <Target Name="PrepareTestConfigurations" Condition="'$(TEAMCITY_VERSION)' != ''">	
    <Message Text="%(ConfigSettings.Identity) (%(ConfigSettings.Action)) - %(ConfigSettings.XPath) : %(ConfigSettings.AttributeName) = %(ConfigSettings.NewAttributeValue)" Importance="High"/>
    
    <MSBuild.ExtensionPack.Xml.XmlFile TaskAction="UpdateAttribute"
                                       File="%(ConfigSettings.Identity)"
                                       XPath="%(ConfigSettings.XPath)"
                                       Key="%(ConfigSettings.AttributeName)"
                                       Value="%(ConfigSettings.NewAttributeValue)"
                                       Condition="'%(ConfigSettings.Action)' == 'UpdateAttribute'"/>
  </Target>
  
  <!--
    Todos for Farada

    <Target Name="Documentation">
    </Target>

    <Target Name="UpdateDebugSymbols">
    </Target>

    <Target Name="DependDB">
    </Target>
  -->

</Project>
